package org.jboss.windup.gui.components;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

import org.jboss.windup.exec.configuration.WindupConfiguration;
import org.jboss.windup.gui.services.WindupGuiPreferences;

/**
 * Provides a panel for selecting the input and output paths.
 *
 * @author jsightler <jesse.sightler@gmail.com>
 */
public class SelectInputOutputForm extends JPanel implements WizardStep
{
    private static final long serialVersionUID = 1L;

    private JTextField inputDir;
    private JLabel inputDirLabel;
    private JLabel jLabel1;
    private JButton openInputSelectionButton;
    private JButton openSelectOutputDialogButton;
    private JTextField outputDir;
    private JLabel outputDirLabel;

    private boolean outputExplicitlyChosen = false;
    private WindupConfiguration configuration;

    /**
     * Creates new form SelectInputOutputForm
     */
    public SelectInputOutputForm()
    {
        initComponents();
    }

    @Override
    public void init(WindupConfiguration cfg)
    {
        this.configuration = cfg;
    }

    @Override
    public void stepComplete()
    {
        configuration.setInputPath(getSelectedInput());
        configuration.setOutputDirectory(getSelectedOutput());
    }

    @Override
    public boolean validateStep()
    {
        if (inputDir.getText() == null || inputDir.getText().trim().equals("") || !Files.exists(Paths.get(this.inputDir.getText())))
        {
            JOptionPane.showMessageDialog(this, "Input Path must be selected!", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (outputDir.getText() == null || outputDir.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Output Directory must be selected!", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        Path inputPath = Paths.get(inputDir.getText()).normalize().toAbsolutePath();
        Path outputPath = Paths.get(outputDir.getText()).normalize().toAbsolutePath();
        if (inputPath.startsWith(outputPath))
        {
            JOptionPane.showMessageDialog(this, "Output Directory must not be a parent of the input directory!", "Validation Error",
                        JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }

    public Path getSelectedInput()
    {
        return Paths.get(inputDir.getText());
    }

    public Path getSelectedOutput()
    {
        return Paths.get(outputDir.getText());
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()
    {

        inputDirLabel = new javax.swing.JLabel();
        inputDir = new javax.swing.JTextField();
        openInputSelectionButton = new javax.swing.JButton();
        outputDirLabel = new javax.swing.JLabel();
        outputDir = new javax.swing.JTextField();
        openSelectOutputDialogButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        inputDirLabel.setText("Input File (or Directory):");
        inputDirLabel.setName(""); // NOI18N

        openInputSelectionButton.setText("Select...");
        openInputSelectionButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                openInputSelectionDialog(evt);
            }
        });

        outputDirLabel.setText("Output Directory:");

        openSelectOutputDialogButton.setText("Select...");
        openSelectOutputDialogButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                openSelectOutputDialogButtonopenInputSelectionDialog(evt);
            }
        });

        jLabel1.setText("<html>\n\t<h1>Welcome to Windup</h1>\n\t<div>\n\t\tThis interface will guide you through the process of running Windup on your application.\n\t</div>\n</html>");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout
                                            .createSequentialGroup()
                                            .addContainerGap()
                                            .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                                                        .addGroup(layout
                                                                    .createSequentialGroup()
                                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                .addComponent(inputDirLabel)
                                                                                .addComponent(outputDirLabel))
                                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                    .addGroup(layout
                                                                                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                                .addComponent(outputDir, javax.swing.GroupLayout.DEFAULT_SIZE, 266,
                                                                                            Short.MAX_VALUE)
                                                                                .addComponent(inputDir))
                                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                .addComponent(openInputSelectionButton)
                                                                                .addComponent(openSelectOutputDialogButton))
                                                                    .addGap(0, 66, Short.MAX_VALUE)))
                                            .addContainerGap())
                    );
        layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
                                            layout.createSequentialGroup()
                                                        .addContainerGap()
                                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 92,
                                                                    javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addGroup(layout
                                                                    .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                    .addComponent(inputDirLabel)
                                                                    .addComponent(inputDir, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addComponent(openInputSelectionButton))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(layout
                                                                    .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                    .addComponent(outputDir, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addComponent(outputDirLabel)
                                                                    .addComponent(openSelectOutputDialogButton))
                                                        .addContainerGap(47, Short.MAX_VALUE))
                    );
    }

    private void openInputSelectionDialog(java.awt.event.ActionEvent evt)
    {
        JFileChooser fileChooser = new JFileChooser(WindupGuiPreferences.getLastSelectedInputPath().toFile());
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            Path selectedPath = fileChooser.getSelectedFile().toPath();
            WindupGuiPreferences.setLastSelectedInputPath(selectedPath);
            this.inputDir.setText(selectedPath.normalize().toAbsolutePath().toString());

            if (!outputExplicitlyChosen)
            {
                Path outputPath = selectedPath.getParent().resolve(selectedPath.getFileName().toString() + "_output");
                this.outputDir.setText(outputPath.toString());
            }
        }
    }

    private void openSelectOutputDialogButtonopenInputSelectionDialog(java.awt.event.ActionEvent evt)
    {
        JFileChooser fileChooser = new JFileChooser(WindupGuiPreferences.getLastSelectedInputPath().toFile());
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            Path selectedPath = fileChooser.getSelectedFile().toPath();
            WindupGuiPreferences.setLastSelectedOutputPath(selectedPath);
            this.outputDir.setText(selectedPath.normalize().toAbsolutePath().toString());
            this.outputExplicitlyChosen = true;
        }
    }
}
